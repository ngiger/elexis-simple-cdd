#!/bin/env ruby
# These values reflect my environment, please adapt it to suit your needs
# by creating a file options.rb
OptFile = "options.rb" if !defined?(OptFile)
if File.exists?(OptFile)
  puts "Reading options from #{OptFile}"
  load OptFile
else
  # default options
  InitialPassword="elexisTest"                                 
  InitialUser="elexis"                                   
  AdminEmail="nobody@nobody.nowhere"              
  AdminPuppet="git://github.com/ngiger/elexis-admin.git" 
  PuppetClient="git://github.com/ngiger/puppet-client.git" 
  APPROX_SERVER="http://localhost:9999/debian/"
  ARCH="i386" # i386,amd64,ppc,ppc64 or whatever Debian supports
  # if you change the architecture, throw away the content of the tmp sub-directory
end


ENV['ARCH']=ARCH

# net/scp does not work
# throughs me a `could not settle on language_client algorithm' exception
# Also puppet had problems installing net-scp gem (I am running jruby)
require 'fileutils'
# need to expand search path for our directory to enable reading conf files

class SimpleCddConf
  @@allConfs = Hash.new
  attr_reader :name
  Fields = ['conf','description', 'locale','keyboard','release',
            'packages','preseed','postinst','customFiles'].each { 
	      |x| eval "attr_accessor :#{x}" 
	    }
  def initialize(name)
    @name=name
    @@allConfs[name]= self
    @customFiles=[]
    return self
  end  

  def copyTo(newName)
    aCopy = SimpleCddConf.new(newName)
    Fields.each{|f| eval "aCopy.#{f} = self.#{f}"}
    @@allConfs[newName] = aCopy
    return aCopy
  end

  def SimpleCddConf::get(index)
    return @@allConfs[index]
  end
end


def runSimpleCdd(name)
  # FileUtils.rm_rf('profiles')
  FileUtils.makedirs('profiles')
  cnf = SimpleCddConf.get(name)
  puts cnf.inspect
  cnf.conf+="profiles=\"#{name}\"\n"
  cnf.conf+="debian_mirror=\"#{APPROX_SERVER}\"\n"
  cnf.conf+="wget_debian_mirror=\"#{APPROX_SERVER}\"\n"
  cnf.customFiles.each{ |x|
    cnf.conf+="all_extras=\"$all_extras \$simple_cdd_dir/profiles/#{x}\"\n"
                      }
  cnf.conf+="debian-mirror=\"#{APPROX_SERVER}\"\n"
  cnf.conf+="wget-debian-mirror=\"#{APPROX_SERVER}\"\n"
  ['conf','description','packages','preseed','postinst'].each { |x|
    d = "profiles/#{name}.#{x}"
    ausgabe=File.open(d, "w+")
    ausgabe.puts(eval("cnf.#{x}"))
    ausgabe.close
    FileUtils.chmod(0755, d) if x == 'postinst'
  }

  keyboard = case cnf.locale
    when "fr_CH" then "fr_CH"
    when "de_CH" then "sg"
  else "C"
  end

  # ENV['cd_img']="myname-#{cnf.release}.iso"
  cmd = "wget_debian_mirror=#{APPROX_SERVER} build-simple-cdd --dist #{cnf.release} \
--keyboard #{keyboard} --locale  #{cnf.locale} \
--conf profiles/#{name}.conf  \
--profiles #{name} \
--debian-mirror #{APPROX_SERVER} \
2>&1 | tee build_#{name}.log"
  sh cmd
  puts "Done creating ISO-image. Test it using the following cmds:"
  puts "qemu-img create  #{name}.qcow2 40GB"
  puts "kvm -hda #{name}.qcow2 -cdrom debian-testing-i386-CD-1.iso -boot d"
end

desc "elexis_server_iso Create ISO create or adapt options.rb to you likeing"
task :elexis_server_iso do
  require "#{Dir.pwd}/puppet_vm"
  gen_elexis_server_cnf('elexis_server_iso')
  runSimpleCdd('elexis_server_iso')
end

# last time tested June 17th 2011 like this!
TestRoot = <<EOF
cd /mnt/images
sudo -u root -s -H
debootstrap squeeze squeeze-root http://fest:3142/debian/
#	  [ ... watch it download the whole system ]
echo "proc squeeze-root/proc proc defaults 0 0" >> /etc/fstab
mount proc squeeze-root/proc -t proc
echo "sysfs squeeze-root/sys sysfs defaults 0 0" >> /etc/fstab
mount sysfs squeeze-root/sys -t sysfs
cp /etc/hosts squeeze-root/etc/hosts
chroot squeeze-root /bin/bash
aptitude install git rake simple-cdd
time rake elexis_server_iso 
# real    1m55.045s
EOF
